package projeto.maispop.usuario;

import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;

import projeto.maispop.excecoes.DataException;
import projeto.maispop.excecoes.EmailException;
import projeto.maispop.excecoes.EntradaException;
import projeto.maispop.excecoes.ImagemException;
import projeto.maispop.excecoes.LogicaException;
import projeto.maispop.excecoes.NomeException;
import projeto.maispop.excecoes.SenhaException;
import projeto.maispop.excecoes.UsuarioInexistenteException;

/**
 * Classe <code>Usuario</code> representa individualmente um integrande do
 * sistema de usuarios da rede social <i>+Pop</i>.
 * 
 * @author Gerson Sales
 * @version 1.0
 * @see ListaDeAmigos
 */
public class Usuario {
	private String nome;
	private String email;
	private String senha;
	private String dataNascimento;
	private String imagemPerfil;

	private ListaDeAmigos listaDeAmigos;
	private Notificacoes notificacoes;

	private MuralUsuario mural;

	private static final String IMG_PERFIL_PADRAO = "resources/default.jpg";

	/**
	 * Construtor sobrecarrecado da classe <code>Usuario</code>.<br>
	 * <b>Uso:</b><br>
	 * Usuario usuario = new Usuario("Nome", "email@valido.com", "SenhaValida",
	 * "00/00/0000", "caminho/imagem.png/jpeg");<br>
	 * <b>Onde:</b><br>
	 * 
	 * @param nome
	 *            String que define o nome do usuario.
	 * @param email
	 *            String que define o e-mail do usuario.
	 * @param senha
	 *            String que define a senha do usuario.
	 * @param telefone
	 *            String que define o numero de telefone do usuario.
	 * @param dataNascimento
	 *            String que define a data de nascimento do usuario.
	 * @param imagemPerfil
	 *            String que indica o caminho da imagem que sera usada no
	 *            perfil.
	 * @throws EntradaException
	 * @throws LogicaException
	 */
	public Usuario(String nome, String email, String senha,
			String dataNascimento, String imagemPerfil) throws EntradaException {

		validaNome(nome);
		validaEmail(email);
		validaSenha(senha);
		validaDataNascimento(dataNascimento);
		validaImagem(imagemPerfil);

		this.nome = nome;
		this.email = email;
		this.senha = senha;
		atribuiData(dataNascimento);
		this.imagemPerfil = imagemPerfil;

		this.listaDeAmigos = new ListaDeAmigos();
		this.notificacoes = new Notificacoes();
		this.mural = new MuralUsuario(nome);
	}

	/**
	 * Construtor sobrecarrecado da classe <code>Usuario</code>.<br>
	 * <b>Uso:</b><br>
	 * Usuario usuario = new Usuario("Nome", "email@valido.com", "SenhaValida",
	 * "00/00/0000");<br>
	 * <b>Onde:</b>
	 * 
	 * @param nome
	 *            String que define o nome do usuario.
	 * @param email
	 *            String que define o e-mail do usuario.
	 * @param senha
	 *            String que define a senha do usuario.
	 * @param telefone
	 *            String que define o numero de telefone do usuario.
	 * @param dataNascimento
	 *            String que define a data de nascimento do usuario.
	 * @throws EntradaException
	 * @throws LogicaException
	 */
	public Usuario(String nome, String email, String senha,
			String dataNascimento) throws EntradaException {
		this(nome, email, senha, dataNascimento, IMG_PERFIL_PADRAO);
	}

	private void atribuiData(String dataNascimento) throws DataException {
		try {
			DateTimeFormatter formatador = DateTimeFormatter
					.ofPattern("dd/MM/yyyy");
			LocalDate sData = LocalDate.parse(dataNascimento, formatador);
			sData = LocalDate.of(sData.getDayOfYear(), sData.getMonth(), sData.getDayOfMonth());
			
			System.out.println(sData);
			this.dataNascimento = sData.toString();
		} catch (DateTimeParseException erro) {
			if (erro.getMessage().contains("Invalid value")) {
				throw new DataException("Data nao existe.");
			} else {
				throw new DataException("Formato de data esta invalida.");
			}
		}
	}

	public String getNome() {
		return nome;
	}

	public void setNome(String nome) throws NomeException {
		validaNome(nome);
		this.nome = nome;
	}

	public String getEmail() {
		return email;
	}

	public void setEmail(String email) throws EmailException {
		validaEmail(email);
		this.email = email;
	}

	public String getSenha() {
		return senha;
	}

	public void setSenha(String senha) throws SenhaException {
		validaSenha(senha);
		this.senha = senha;
	}

	public String getDataNascimento() {
		return dataNascimento;
	}

	public void setDataNascimento(String dataNascimento) throws DataException {
		atribuiData(dataNascimento);
	}

	public String getImagemPerfil() {
		return imagemPerfil;
	}

	public String getNotificacoes() {
		return notificacoes.toString();
	}

	public void setImagemPerfil(String imagemPerfil) throws ImagemException {
		validaImagem(imagemPerfil);
		this.imagemPerfil = imagemPerfil;
	}

	/**
	 * Metodo <code>removeImagemPerfil</code> responsavel por modificar a imagem
	 * do perfil para uma avatar padrao.
	 */
	public void removeImagemPerfil() {
		this.imagemPerfil = IMG_PERFIL_PADRAO;
	}

	/**
	 * Metodo <code>solicitaAmizade</code> responsavel por enviar uma
	 * solicitacao de amizade para o usuario recebido como parametro.
	 * 
	 * @param usuario
	 *            <i>Usuario</i> que recebera a solicitacao.
	 */
	public void solicitaAmizade(Usuario usuario) {
		if (!(listaDeAmigos.contemAmigo(usuario))) {
			usuario.recebeSolicitacao(this);
		} else {
			notificaMe(notificacoes.amizadeExistente(usuario.getNome()));
		}
	}

	/**
	 * Metodo <code>recebeSolicitacao</code> responsavel por receber uma
	 * solicitacao de amizade enviada por terceiros(outro usuario) e receber uma
	 * notificacao sobre tal evento.
	 * 
	 * @param usuario
	 *            <i>Usuario</i> que enviou a solicitacao.
	 */
	public void recebeSolicitacao(Usuario usuario) {
		this.listaDeAmigos.recebeSolicitacao(usuario);
		notificaMe(notificacoes.pedidoAmizade(usuario.getNome()));
	}

	/**
	 * Metodo <code>aceitaAmizade</code> responsavel por aceitar a solicitacao
	 * de amizade enviada por terceiros(outro usuario) e adiciona-lo na lista de
	 * amigos.
	 * 
	 * @param usuario
	 *            <i>Usuario</i> que sera adicionado na lista de amigos.
	 */
	public void aceitaAmizade(Usuario usuario) {
		this.listaDeAmigos.aceitaSolicitacao(usuario);
		usuario.adicionaAmigo(this);
		usuario.notificaMe(notificacoes.amizadeAceita(getNome()));
	}

	/**
	 * Metodo <code>recusaAmizade</code> responsavel por rejeitar uma
	 * solicitacao de amizade enviada por terceiros(outro usuario) e notificar o
	 * mesmo sobre tal rejeicao.
	 * 
	 * @param usuario
	 *            <i>Usuario</i> que tera a solicitacao de amizade rejeitada.
	 */
	public void recusaAmizade(Usuario usuario) {
		this.listaDeAmigos.recusaSolicitacao(usuario);
		usuario.notificaMe(notificacoes.amizadeRejeitada(getNome()));
	}

	/**
	 * Metodo <code>notificaMe</code> responsavel por adicionar uma notificacao
	 * recebida a lista de notificacoes.
	 * 
	 * @param notificacao
	 *            String recebida como notificacao.
	 */
	public void notificaMe(String notificacao) {
		this.notificacoes.recebeNotificacao(notificacao);
	}

	/**
	 * Metodo <code>adicionaAmigo</code> adiciona um tipo <i>Usuario</i> a
	 * <i>ListaDeAmigos</i> listaDeAmigos e adiciona a si mesmo da lista de
	 * amigos do amigo. <b>onde:</b><br>
	 * 
	 * @param amigo
	 *            tipo <i>Usuario</i> para identificar o amigo a ser adicionado
	 *            a lista.
	 */
	public void adicionaAmigo(Usuario amigo) {
		this.listaDeAmigos.adicionaAmigo(amigo);
	}

	/**
	 * Metodo <code>removeAmigo</code> remove um tipo <i>Usuario</i> da
	 * <i>ListaDeAmigos</i> listaDeAmigos e remove a si mesmo da lista de amigos
	 * do amigo. <b>onde:</b><br>
	 * 
	 * @param amigo
	 *            <i>Usuario</i> para identificar o amigo a ser removido da
	 *            lista.
	 */
	public void removeAmigo(Usuario amigo) {
		this.listaDeAmigos.removeAmigo(amigo);
		amigo.serRemovido(this);
	}

	/**
	 * Metodo <code>serRemovido</code> responsavel por remover o amigo da lista
	 * de amigos e receber a notificacao de tal acao.
	 * 
	 * @param usuario
	 *            <i>Usuario</i> a ser removido da lista de amigos.
	 */
	public void serRemovido(Usuario usuario) {
		this.listaDeAmigos.removeAmigo(usuario);
		notificaMe(notificacoes.remocaoAmizade(usuario.getNome()));
	}

	/**
	 * Metodo <code>buscaAmigo</code> responsavel por realizar uma busca na
	 * lista de amigo a procura de um usuario com mesmo e-mail passado como
	 * parametro.
	 * 
	 * @param email
	 *            String a ser considerada como objeto de busca.
	 * @return <i>Usuario</i> caso seja encontrado.
	 * @throws UsuarioInexistenteException
	 */
	public Usuario buscaAmigo(String email) throws UsuarioInexistenteException {
		return this.listaDeAmigos.buscaAmigo(email);
	}

	// Teste de criacao do mural;
	/**
	 * Metodo <code>postar</code> responsavel por publicar uma nova atividade no
	 * mural de noticias do usuario.
	 * 
	 * @param texto
	 *            String relacionada ao texto que o usuario ira digitar na
	 *            postagem.
	 * @param audio
	 *            String relacionada ao caminho do audio que o usuario colocara
	 *            em sua postagem.
	 * @param musica
	 *            String relacionada ao caminho da musica que o usuario colocara
	 *            em sua postagem.
	 * @param video
	 *            String relacionada ao caminho do video que o usuario colocara
	 *            em sua postagem.
	 */
	public void postar(String texto, String audio, String musica, String video) {
		this.mural.postar(listaDeAmigos, texto, audio, musica, video);
	}

	/**
	 * Metodo <code>noticia</code> responsavel por "importar" a publicacao de
	 * algum amigo para a propria linha do tempo.
	 * 
	 * @param noticia
	 *            <i>Postagem</i> que sera publicada no mural de noticias.
	 */
	public void noticia(Postagem noticia) {
		this.mural.feedNoticias(noticia);
	}

	public String getMural() {
		return this.mural.toString();
	}

	public String bucaPorHashTag(String hashTag) {
		return this.mural.buscaPorHashTag(hashTag);
	}

	// DOCUMENTACAO:

	private void validaNome(String nome) throws NomeException {
		String erro = "Nome dx usuarix nao pode ser vazio.";

		if (nome == null) {
			throw new NomeException(erro);
		} else if (nome.trim().length() == 0) {
			throw new NomeException(erro);
		}
	}

	private void validaEmail(String email) throws EmailException {
		String erro = "Formato de e-mail esta invalido.";

		if (email == null) {
			throw new EmailException(erro);
		} else if (!(email.contains("@"))) {
			throw new EmailException(erro);
		} else if (!(email.contains(".com"))) {
			throw new EmailException(erro);
		} else if (email.trim().length() == 0) {
			throw new EmailException(erro);
		}
	}

	private void validaSenha(String senha) throws SenhaException {
		if (senha == null) {
			throw new SenhaException();
		} else if (senha.trim().length() == 0) {
			throw new SenhaException();
		}
	}

	private void validaDataNascimento(String dataNascimento)
			throws DataException {
		String erro = "Formato de data esta invalida.";

		if (dataNascimento == null) {
			throw new DataException(erro);
		} else if (dataNascimento.trim().length() == 0) {
			throw new DataException(erro);
		}
	}

	private void validaImagem(String imagem) throws ImagemException {
		if (imagem == null) {
			throw new ImagemException();
		} else if (imagem.trim().length() == 0) {
			throw new ImagemException();
		} else if (!(imagem.contains(".jpg") && !(imagem.contains(".png")))) {
			throw new ImagemException();
		}
	}

}
