package projeto.maispop.sistema;

import projeto.maispop.excecoes.EntradaException;
import projeto.maispop.excecoes.LogarDeslogarException;
import projeto.maispop.excecoes.LogicaException;
import projeto.maispop.excecoes.NomeException;
import projeto.maispop.excecoes.SenhaException;
import projeto.maispop.excecoes.UsuarioExistenteException;
import projeto.maispop.excecoes.UsuarioInexistenteException;

public class Facade {

	private Controller controller;

	public Facade() {
		this.controller = new Controller();
	}

	public void iniciaSistema() {

	}

	public void fechaSistema() throws LogicaException {
		this.controller.fechaSistema();

	}

	public String cadastraUsuario(String nome, String email, String senha,
			String dataNascimento, String imagem)
			throws EntradaException, UsuarioExistenteException {
		try {
			this.controller.cadastraUsuario(nome, email, senha, dataNascimento,
					imagem);
		}catch(EntradaException erro) {
			throw new EntradaException("Erro no cadastro de Usuarios. " + erro.getMessage(), erro);
		}catch(UsuarioExistenteException erro) {
			throw new UsuarioExistenteException();
		}

		return email;
	}

	public String cadastraUsuario(String nome, String email, String senha,
			String dataNascimento) throws EntradaException {
		try {
			this.controller.cadastraUsuario(nome, email, senha, dataNascimento);
		}catch (EntradaException erro) {
			throw new EntradaException("Erro no cadastro de Usuarios. " + erro.getMessage(), erro);
		}catch (UsuarioExistenteException erro) {
			throw erro;
		}
		return email;
	}
	
	public void removeUsuario(String email) throws UsuarioInexistenteException {
		this.controller.removeUsuario(email);
	}
	
	public String getInfoUsuario(String atributo) throws EntradaException,
			LogicaException {
		return this.controller.getInfoUsuario(atributo);
		
	}

	public String getInfoUsuario(String atributo, String email)
			throws EntradaException, LogicaException {
		return this.controller.getInfoUsuario(atributo, email);
	}
	
	public void atualizaPerfil(String atributo, String valor, String antigoValor)
			throws UsuarioInexistenteException, EntradaException {
		this.controller.atualizaPerfil(atributo, valor, antigoValor);
	}

	public void atualizaPerfil(String atributo, String valor)
			throws UsuarioInexistenteException, EntradaException {
		this.controller.atualizaPerfil(atributo, valor);
	}

	public void login(String email, String senha)
			throws LogicaException, SenhaException {
		this.controller.login(email, senha);
	}
	
	public void logout() throws LogarDeslogarException {
		this.controller.logout();
	}

}
